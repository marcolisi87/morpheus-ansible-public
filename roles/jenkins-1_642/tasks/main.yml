---
# This playbook will install java.

- name: install perl zip sudo
  apt: pkg={{item}} install_recommends=no state=installed
  with_items:
    - perl
    - zip
    - sudo
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

- name: java prep
  shell: 'echo oracle-java8-installer shared/accepted-oracle-license-v1-1 select true | debconf-set-selections && add-apt-repository -y ppa:webupd8team/java && apt-get update && apt-get install -y oracle-java8-installer && rm -rf /var/lib/apt/lists/* && rm -rf /var/cache/oracle-jdk8-installer'
  ignore_errors: yes

- name: set JAVA_HOME
  lineinfile: dest=/etc/profile regexp='^JAVA_HOME=/usr/lib/jvm/java-7-openjdk-amd64' line="JAVA_HOME=/usr/lib/jvm/java-7-openjdk-amd64" state=present

- name: add java upstart
  template: src=java.conf.j2 dest=/etc/init/java.conf mode=0644

- name: add upstart override
  template: src=java.override.j2 dest=/etc/init/java.override mode=0644

ENV JENKINS_HOME /var/jenkins_home
ENV JENKINS_SLAVE_AGENT_PORT 50000

# Jenkins is run with user `jenkins`, uid = 1000
# If you bind mount a volume from the host or a data container, 
# ensure you use the same uid
- name: add jenkins user
  shell: 'RUN useradd -d /var/jenkins_home -u 1000 -m -s /bin/bash jenkins && adduser jenkins sudo'

# `/usr/share/jenkins/ref/` contains all reference configuration we want 
# to set on a fresh new installation. Use it to bundle additional plugins 
# or config file with your custom jenkins Docker image.

RUN mkdir -p /usr/share/jenkins/ref/init.groovy.d
ENV TINI_SHA 066ad710107dc7ee05d3aa6e4974f01dc98f3888

# Use tini as subreaper in Docker container to adopt zombie processes 
RUN curl -fL https://github.com/krallin/tini/releases/download/v0.5.0/tini-static -o /bin/tini && chmod +x /bin/tini \
  && echo "$TINI_SHA /bin/tini" | sha1sum -c -

COPY init.groovy /usr/share/jenkins/ref/init.groovy.d/tcp-slave-agent-port.groovy

ENV JENKINS_VERSION 1.642.1
ENV JENKINS_SHA 6a0213256670a00610a3e09203850a0fcf1a688e


# could use ADD but this one does not check Last-Modified header 
# see https://github.com/docker/docker/issues/8331
RUN curl -fL http://mirrors.jenkins-ci.org/war-stable/$JENKINS_VERSION/jenkins.war -o /usr/share/jenkins/jenkins.war \
  && echo "$JENKINS_SHA /usr/share/jenkins/jenkins.war" | sha1sum -c -

ENV JENKINS_UC https://updates.jenkins-ci.org
RUN chown -R jenkins "$JENKINS_HOME" /usr/share/jenkins/ref

# for main web interface:
#EXPOSE 8080
# will be used by attached slave agents:
#EXPOSE 50000

ENV COPY_REFERENCE_FILE_LOG $JENKINS_HOME/copy_reference_file.log

USER jenkins

COPY jenkins.sh /usr/local/bin/jenkins.sh
COPY morpheus-jenkins.hpi /usr/share/jenkins/ref/plugins/morpheus-jenkins.jpi
RUN unzip -qqt /usr/share/jenkins/ref/plugins/morpheus-jenkins.jpi

# from a derived Dockerfile, can use `RUN plugins.sh active.txt` to setup /usr/share/jenkins/ref/plugins from a support bundle
COPY plugins.sh /usr/local/bin/plugins.sh

ENTRYPOINT ["/bin/tini", "--", "/usr/local/bin/jenkins.sh"]
