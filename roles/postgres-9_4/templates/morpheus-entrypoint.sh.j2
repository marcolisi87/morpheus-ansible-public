#!/bin/bash
set -e

if [ -e "/var/opt/morpheus/vm/morpheus.env" ]; then
	source /var/opt/morpheus/vm/morpheus.env
fi

set_listen_addresses() {
	sedEscapedValue="$(echo "$1" | sed 's/[\/&]/\\&/g')"
	sed -ri "s/^#?(listen_addresses\s*=\s*)\S+/\1'$sedEscapedValue'/" "/morpheus/config/postgresql.conf"
}

mkdir -p "$PGDATA"
chown -R postgres "$PGDATA"
chmod g+s /run/postgresql
chown -R postgres /run/postgresql
if [ ! -s "$PGDATA/PG_VERSION" ]; then
	sudo postgres initdb 
	sudo postgres cp $PGDATA/pg_hba.conf /morpheus/config/
	sudo postgres cp $PGDATA/pg_ident.conf /morpheus/config/
	if [ "$POSTGRES_PASSWORD" ]; then
		pass="PASSWORD '$POSTGRES_PASSWORD'"
		authMethod=md5
		echo "*:*:*:postgres:$POSTGRES_PASSWORD" >> /morpheus/config/.pgpass
		echo "*:*:*:replicator:morpheusSlave" >> /morpheus/config/.pgpass
		chown -R postgres /morpheus/config/.pgpass
		chmod 600 /morpheus/config/.pgpass
	else
		cat >&2 <<-'EOWARN'
			****************************************************
			WARNING: No password has been set for the database.
			         Use "-e POSTGRES_PASSWORD=password" to set
			         it in "docker run".
			****************************************************
		EOWARN
		pass=
		authMethod=trust
	fi
	{ echo; echo "host all all 0.0.0.0/0 $authMethod"; } >> "/morpheus/config/pg_hba.conf"
	{ echo; echo "host replication replicator 0.0.0.0/0 $authMethod"; } >> "/morpheus/config/pg_hba.conf"

	set_listen_addresses '' # we're going to start up postgres, but it's not ready for use yet (this is initialization), so don't listen to the outside world yet
	gosu postgres "$@" &
	pid="$!"
	for i in {30..0}; do
		if echo 'SELECT 1' | psql --username postgres &> /dev/null; then
			break
		fi
		echo 'PostgreSQL init process in progress...'
		sleep 1
	done
	if [ "$i" = 0 ]; then
		echo >&2 'PostgreSQL init process failed'
		exit 1
	fi
	: ${POSTGRES_USER:=postgres}
	: ${POSTGRES_DB:=$POSTGRES_USER}
	if [ "$POSTGRES_DB" != 'postgres' ]; then
		psql --username postgres <<-EOSQL
			CREATE DATABASE "$POSTGRES_DB" ;
		EOSQL
		echo
	fi
	if [ "$POSTGRES_USER" = 'postgres' ]; then
		op='ALTER'
	else
		op='CREATE'
	fi

	psql --username postgres <<-EOSQL
		$op USER "$POSTGRES_USER" WITH SUPERUSER $pass ;
	EOSQL
	psql --username postgres <<-EOSQL
		CREATE USER replicator REPLICATION LOGIN CONNECTION LIMIT 5 ENCRYPTED PASSWORD 'morpheusSlave';
	EOSQL
		
	echo	
	echo
	for f in /docker-entrypoint-initdb.d/*; do
		case "$f" in
			*.sh)  echo "$0: running $f"; . "$f" ;;
			*.sql) echo "$0: running $f"; psql --username postgres --dbname "$POSTGRES_DB" < "$f" && echo ;;
			*)     echo "$0: ignoring $f" ;;
		esac
		echo
	done
	if ! kill -s TERM "$pid" || ! wait "$pid"; then
		echo >&2 'PostgreSQL init process failed'
		exit 1
	fi
	set_listen_addresses '*'
	echo
	echo 'PostgreSQL init process complete; ready for start up.'
	echo
	if [ "$PGMODE" = 'SLAVE' ]; then
		rm -rf /var/lib/postgresql/data/pgdata/*
		pg_basebackup -h $PGMASTER_HOST -p $PGMASTER_PORT -D /var/lib/postgresql/data/pgdata -U replicator -P -v -x -w
		{ echo "primary_conninfo = 'host=$PGMASTER_HOST port=$PGMASTER_PORT user=replicator password=morpheusSlave'"; echo "trigger_file = '/var/lib/postgresql/data/pgdata/failover'"; echo "standby_mode = 'on'"; } >> "/var/lib/postgresql/data/pgdata/recovery.conf"
		chown -R postgres "$PGDATA"
	fi
fi

su -c "/usr/lib/postgresql/9.4/bin/postgres -D /var/lib/postgresql/data/pgdata -c config_file=/morpheus/config/postgresql.conf postgres"

